// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  username         String          @unique
  email            String          @unique
  fullName         String
  password         String
  profilePic       String
  gender           Gender
  role             Role            @default(patient)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  patient          PatientDetails?
  doctor           DoctorDetails?
  conversationsIds String[]

  conversations Conversation[]
  messages      Message[]
  meds  Medicine[]
}

model PatientDetails {
  id             Int     @id @default(autoincrement())
  bloodGroup     String
  chronicIllness String?
  gender         String
  user           User    @relation(fields: [patientId], references: [id])
  patientId      String  @unique
}

model DoctorDetails {
  id              Int    @id @default(autoincrement())
  licenseNo       String
  user            User   @relation(fields: [doctorId], references: [id])
  doctorId        String @unique
  specialization  String
  practiceAddress String
  YoE             Int
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIds String[]
  participants   User[]

  messageIds String[]
  messages   Message[]
}

model Message {
  id String @id @default(cuid())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  male
  female
  other
}

enum Role {
  patient
  doctor
}

model Medicine{
  medId String @id @unique @default(uuid())
  name String
  userId String
  user User @relation(fields: [userId],references: [id])
  dosage String
  doseLeft Int
  stockLeft Int
  nextOcc DateTime?
  rrule String
}